/* eslint-disable max-len */
import {writeFile} from '../common';
/**
 * Create package.json files.
 * @param {String} projectName Project Name.
 */
function createPackage(projectName) {
  const data = {
    'name': projectName,
    'version': '1.0.0',
    'description': `${projectName} Backend`,
    'main': 'index.js',
    'scripts': {
      'start': 'nodemon --exec babel-node server/index.js',
      'test': 'echo "Error: no test specified" && exit 1',
    },
    'author': '',
    'license': 'MIT',
    'dependencies': {
      'apollo-server-express': '^2.6.7',
      'body-parser': '^1.19.0',
      'dotenv': '^8.0.0',
      'express': '^4.17.1',
      'express-graphql': '^0.8.0',
      'graphql': '^14.4.0',
      'graphql-tools': '^4.0.5',
      'lodash': '^4.17.11',
      'mongodb': '^3.2.7',
      'mongoose': '^5.6.3',
    },
    'devDependencies': {
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.4.5',
      '@babel/preset-env': '^7.4.5',
      'nodemon': '^1.19.1',
    },
  };
  writeFile(JSON.stringify(data, null, 4), 'package.json');
}
/**
 * Create Server file.
 */
function createGitIgnore() {
  const data = `# Logs
  logs
  *.log
  npm-debug.log*
  yarn-debug.log*
  yarn-error.log*
  lerna-debug.log*
  
  # Diagnostic reports (https://nodejs.org/api/report.html)
  report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
  
  # Runtime data
  pids
  *.pid
  *.seed
  *.pid.lock
  
  # Directory for instrumented libs generated by jscoverage/JSCover
  lib-cov
  
  # Coverage directory used by tools like istanbul
  coverage
  *.lcov
  
  # nyc test coverage
  .nyc_output
  
  # Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
  .grunt
  
  # Bower dependency directory (https://bower.io/)
  bower_components
  
  # node-waf configuration
  .lock-wscript
  
  # Compiled binary addons (https://nodejs.org/api/addons.html)
  build/Release
  
  # Dependency directories
  node_modules/
  jspm_packages/
  
  # TypeScript v1 declaration files
  typings/
  
  # TypeScript cache
  *.tsbuildinfo
  
  # Optional npm cache directory
  .npm
  
  # Optional eslint cache
  .eslintcache
  
  # Microbundle cache
  .rpt2_cache/
  .rts2_cache_cjs/
  .rts2_cache_es/
  .rts2_cache_umd/
  
  # Optional REPL history
  .node_repl_history
  
  # Output of 'npm pack'
  *.tgz
  
  # Yarn Integrity file
  .yarn-integrity
  
  # dotenv environment variables file
  .env
  .env.test
  
  # parcel-bundler cache (https://parceljs.org/)
  .cache
  
  # Next.js build output
  .next
  
  # Nuxt.js build / generate output
  .nuxt
  dist
  
  # Gatsby files
  .cache/
  # Comment in the public line in if your project uses Gatsby and *not* Next.js
  # https://nextjs.org/blog/next-9-1#public-directory-support
  # public
  
  # vuepress build output
  .vuepress/dist
  
  # Serverless directories
  .serverless/
  
  # FuseBox cache
  .fusebox/
  
  # DynamoDB Local files
  .dynamodb/
  
  # TernJS port file
  .tern-port  
`;
  writeFile(data, '.gitignore');
}
/**
 * Create env file.
 */
function createEnv() {
  const data = `mongoURI=mongodb://localhost:27017
mongoDBName=spreadd
PORT=3000`;
  writeFile(data, '.env');
}
/**
 * Create babelrc file.
 */
function createBabelrc() {
  const data = {
    'presets': [
      '@babel/preset-env',
    ],
  };
  writeFile(JSON.stringify(data, null, 4), '.babelrc');
}

/**
 * Create Server file.
 */
function createServerFile() {
  const data = `require("dotenv").config();
    var express = require('express');
    var mongoose = require('mongoose');
    const app = express();
    import { ApolloServer } from 'apollo-server-express';
    import * as schema from '../graphql/schema';
    
    //get Mongo URL and DB name from env
    const { mongoURI: dbURL, mongoDBName: dbName } = process.env;
    const db = \`\${dbURL}/\${dbName}\`;
    
    const port = process.env.PORT || "4000";
    
    //apollo server instance
    const SERVER = new ApolloServer({
      typeDefs: schema.TYPEDEFS,
      resolvers: schema.RESOLVERS,
      playground: {
        endpoint: \`http://localhost:\${port}/graphql\`
      }
    });
    
    //apply middleware on app for apollo server
    SERVER.applyMiddleware({ app });
    mongoose
    .connect(
      db,
      {
        useCreateIndex: true,
        useNewUrlParser: true
      }
    )
    .then(() => {
      console.log("MongoDB connected");
      app.listen(port, () => console.log(\`Spreadd Graphql server running on localhost:\${port}/graphql\`));
    })
    .catch(err => console.log(err));`;
  writeFile(data, './server/index.js');
}

export const init = async (projectName) => {
  await createPackage(projectName);
  await createGitIgnore();
  await createEnv();
  await createBabelrc();
  await createServerFile();
};
